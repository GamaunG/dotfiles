# vim: filetype=zsh
## Previewers
#set previewer '~/.config/lf/previewer_noimages' 
set previewer '~/.config/lf/previewer' 
set cleaner '~/.config/lf/cleaner'
set sixel  #for sixel preview using chafa


## Settings
set hidden
set drawbox
set roundbox
set icons
set ignorecase
set incsearch
set smartcase
set mouse
set autoquit
set preserve 'mode:timestamps'
#set shell dash
set ifs "\n"
set period 1
set scrolloff 10
set truncatepct 50
set dupfilefmt '%b(%n)%e'
set infotimefmtnew "02.01 15:04"
set infotimefmtold "02.01  2006"
set numberfmt "\033[2m"
set info time:size
#set info size:time

## Functions
#cmd open ${{
#    case $(file --mime-type "$f" -bL) in
#        text/*|application/json) $EDITOR "$f";;
#        *) cmd &$OPENER "$f" &>/dev/null;;
#    esac
#}}

cmd ExtractHere ${{
	for f in $fx; do
		case "$f" in
			*.tar.gz|*.tgz) tar -xzf "$f" ;;
			*.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar -xjf "$f" ;;
			*.tar.xz|*.txz) tar xJf "$f" ;;
			*.tar.zst) tar --zstd -xf "$f" ;;
			*.tar) tar -xf "$f" ;;
			*.zip) unzip "$f" ;;
			*.rar) unrar x "$f" ;;
			*.7z) 7z x "$f" ;;
			*) echo "Unsupported format" ;;
		esac
	done
	lf -remote 'send reload'
}}

cmd ExtractToNewDir ${{
	for f in $fx; do
		if [ $(file -Lb --mime-type "$f" | grep '^application/.*') ]; then
			fn="$(basename "$f")"
			sfn="${fn%%.*}"
			mkdir "$sfn" &&
			if [ -d "$sfn" ]; then
				cd "$sfn" &&
				case "$f" in
					*.tar.gz|*.tgz) tar -xzf "$f" ;;
					*.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar -xjf "$f" ;;
					*.tar.xz|*.txz) tar xJf "$f" ;;
					*.tar.zst) tar --zstd -xf "$f" ;;
					*.tar) tar -xf "$f" ;;
					*.zip) unzip "$f" ;;
					*.rar) unrar x "$f" ;;
					*.7z) 7z x "$f" ;;
					*) echo "Unsupported format" ;;
				esac
				[ -z "$(ls -A ../"$sfn")" ] && rmdir ../"$sfn" || true
				cd ..
			else
				echo "Error"
			fi
		else
			echo "This isnt an archive"
		fi
	done
	lf -remote 'send reload'
	lf -remote "send $id select \"$sfn\""
}}

cmd ArchiveTar %{{
	if [ -z "$fs" ] && [ -d "$f" ]; then
		dir=$(basename $f)
		tar -czvf $f.tar.gz "$dir"
		lf -remote "send $id select \"$f.tar.gz\""
	elif [ -n "$fs" ]; then
		[ -z "$1" ] && printf "Enter archive name (escape spaces): " && read answ || answ="$1"
		files=$(echo "$fx" | sed "s|^$PWD|.|g; s/\ /\\ /g")
		tar -czvf $answ.tar.gz $files
		lf -remote "send $id select \"$answ.tar.gz\""
	else
		echo "select directory or multiple files"
	fi
	lf -remote 'send reload'
}}

cmd ArchiveZip %{{
	if [ -z "$fs" ] && [ -d "$f" ]; then
		dir=$(basename $f)
		zip -r $f.zip "$dir"
		lf -remote "send $id select \"$f.zip\""
	elif [ -n "$fs" ]; then
		[ -z "$1" ] && printf "Enter archive name (escape spaces): " && read answ || answ="$1"
		files=$(echo "$fx" | sed "s|^$PWD|.|g; s/\ /\\ /g")
		zip -r $answ.zip $files
		lf -remote "send $id select \"$answ.zip\""
	else
		echo "select directory or multiple files"
	fi
	lf -remote 'send reload'
}}

cmd mkdir %{{
	newdir="$(echo $* | tr ' ' '\ ')"
	mkdir -p "$newdir"
	lf -remote "send $id select \"$newdir\""
}}

cmd touch %{{
	file="$(echo $* | tr ' ' '\ ')"
	if [ "${file##*.}" = "sh" ]; then
		if [ ! -f "$file" ]; then
			touch "$file"
			printf "#!/bin/bash\n " >> "$file"
			chmod +x "$file"
		else
			touch "$file"
		fi
	else
		touch "$file"
	fi
	lf -remote "send $id select \"$file\""
}}

cmd chmod %{{
	[ -z "$1" ] && printf "chmod.. : " && read answ || answ="$1"
	echo "$fx" | while read -r f; do
		chmod "$answ" "$f"
	done
	lf -remote 'send reload'
}}

cmd SymlinkCreate %{{
	echo "$fx" | while read -r f; do
		ln -s "$f" "$f-link"
	done
	lf -remote "send $id select \"$f-link\""
}}

cmd SymlinkConvertToRelative %{{
	for f in $fx; do
		if [ ! -L "$f" ]; then
			continue
		fi
		target=$(file "$f" | grep -oP ' \K[/.].*')
		linkdir=$(dirname "$f")
		reltarg=$(realpath --relative-to="$linkdir" "$target")
		ln -sf "$reltarg" "$f"
	done
}}

cmd SymlinkRename %{{
	for f in $fx; do
		mv -i "$f" "$(echo ${f%-link})"
	done
}}

cmd FollowLink %{{
	res="$(file "$f" | grep -oP ' \K[/.].*')" # works better
	#res="$(realpath "$f")"
	if [ -f "$res" ]; then
		cmd="select"
	elif [ -d "$res" ]; then
		cmd="cd"
	fi
	lf -remote "send $id $cmd \"$res\""
}}

cmd Bulkrename ${{
    tmp_old="$(mktemp)"
    tmp_new="$(mktemp)"
    [ -n "$fs" ] && fs=$(basename -a $fs) || fs=$(ls)
    echo "$fs" > "$tmp_old"
    echo "$fs" > "$tmp_new"
    $EDITOR "$tmp_new"
    [ "$(wc -l < "$tmp_old")" -eq "$(wc -l < "$tmp_new")" ] || { rm -f "$tmp_old" "$tmp_new"; exit 1; }
    paste "$tmp_old" "$tmp_new" | while IFS="$(printf '\t')" read -r src dst
    do
        [ "$src" = "$dst" ] || [ -e "$dst" ] || mv -- "$src" "$dst"
    done
    rm -f "$tmp_old" "$tmp_new"
    lf -remote "send $id unselect"
}}

cmd fzf_jump ${{
	if command -v fd > /dev/null; then
		res="$(fd . -H -c always | fzf --ansi --header="Jump to location")"
	else
		res="$(find . -maxdepth 6 | fzf --header="Jump to location")"
	fi
    if [ -n "$res" ]; then
        if [ -d "$res" ]; then
            cmd="cd"
        else
            cmd="select"
        fi
        res="$(printf '%s' "$res" | sed 's/\\/\\\\/g;s/"/\\"/g')"
        lf -remote "send $id $cmd \"$res\""
    fi
}}

# https://junegunn.github.io/fzf/tips/ripgrep-integration/
cmd fzf_ripgrep ${{
	(RELOAD='reload:rg --column --color=always --smart-case {q} || :'
	OPENER="$EDITOR {1} +{2}"
	ENTER="lf -remote 'send $id select {1}' ; $OPENER"
	fzf --disabled --ansi \
		--bind "start:$RELOAD" --bind "change:$RELOAD" \
		--bind "enter:become:$ENTER" \
		--bind "ctrl-o:execute:$OPENER" \
		--bind 'alt-a:select-all,alt-d:deselect-all,ctrl-/:toggle-preview' \
		--delimiter : \
		--preview 'bat --style=full --color=always --highlight-line {2} {1}' \
		--preview-window '~4,+{2}+4/3,<80(up)' \
		--query "$*")
}}

cmd GoToPath %{{
	[ -z "$1" ] && printf "go to path: " && read answ || answ="$1"
	res="$(eval echo "$answ" | sed -e "s|~|$HOME|")"
	if [ -f "$res" ]; then
		cmd="select"
	elif [ -d "$res" ]; then
		cmd="cd"
	fi
	lf -remote "send $id $cmd \"$res\""
}}

cmd git_branch ${{
	git branch | fzf | xargs git checkout
	pwd_shell=$(pwd | sed 's/\\/\\\\/g;s/"/\\"/g')
	lf -remote "send $id updir"
	lf -remote "send $id cd \"$pwd_shell\""
}}

cmd git_clone ${{
	dir="${1##*/}"
	dir="${dir%%.git*}"
	git clone "$*" &&
	lf -remote "send $id cd \"$dir\""
}}

cmd DragAndDropSend %blobdrop $fx

cmd DragAndDropRecieve %{{
	bash -c '
		coproc { blobdrop -t; }
		read -r output <&"${COPROC[0]}" && killall blobdrop >/dev/null
		if [[ "$output" =~ ^https?:// ]]; then
			wget -cq --show-progress "$output"
		elif [ -f "$output" ] || [ -d "$output" ]; then
			cp "$output" .
		fi
	'
}}

cmd trash $trash-put $fx
cmd trash-restore $trash-restore 
cmd trash-empty %trash-empty

cmd CopyTo ${{
	set -f
	dest=$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' "${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs" | fzf --prompt 'Copy to where? ' | sed 's|~|$HOME|')
	[ -z "$dest" ] && exit
	destpath=$(eval printf '%s' \"$dest\")
	clear; tput cup $(($(tput lines)/3)); tput bold
	echo "From:"
	echo "$fx" | sed 's/^/   /'
	printf "To:\n   %s\n\n\tcopy?[y/N]" "$destpath"
	read -r ans
	[ "$ans" != "y" ] && exit
	for x in $fx; do
		cp -ivr "$x" "$destpath"
	done
}}

cmd MoveTo ${{
	set -f
	dest=$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' "${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs" | fzf --prompt 'Move to where? ' | sed 's|~|$HOME|')
	[ -z "$dest" ] && exit
	destpath=$(eval printf '%s' \"$dest\")
	clear; tput cup $(($(tput lines)/3)); tput bold
	echo "From:"
	echo "$fx" | sed 's/^/   /'
	printf "To:\n   %s\n\n\tmove?[y/N]" "$destpath"
	read -r ans
	[ "$ans" != "y" ] && exit
	for x in $fx; do
		mv -iv "$x" "$destpath"
	done
}}

cmd CopyPath ${{
	if [ -n "$WAYLAND_DISPLAY" ]; then
		printf "%s" "$fx" | wl-copy
	else
		printf "%s" "$fx" | xclip -selection clipboard
	fi
}}

cmd CopyName ${{
	fx=$(basename -a $fx)
	if [ -n "$WAYLAND_DISPLAY" ]; then
		printf "%s" "$fx" | wl-copy
	else
		printf "%s" "$fx" | xclip -selection clipboard
	fi
}}

cmd CopyDirName ${{
	f=$(dirname $f)
	if [ -n "$WAYLAND_DISPLAY" ]; then
		printf "%s" "$f" | wl-copy
	else
		printf "%s" "$f" | xclip -selection clipboard
	fi
}}

cmd CopyFileContent ${{
	[ -d "$f" ] && exit 1
	if [ -n "$WAYLAND_DISPLAY" ]; then
		wl-copy < "$f"
	else
		exit 1 # idc
	fi
}}

cmd mount ${{
	mounter
	lf -remote 'send reload'
}}

cmd unmount ${{
	unmounter
	lf -remote 'send reload'
}}

# set globsearch # breaks search
cmd globSearchSelect &{{
    lf -remote "send $id :set globsearch" # breaks search
    lf -remote "send $id :glob-select $1; search; push $1<enter>"
    # lf -remote "send $id :set noglobsearch" # breaks search again
}}



## Bindings
# Sort
map sa set sortby atime
map sc set sortby ctime
map ss set sortby size
map st set sortby time
map sf set sortby ext
map sn set sortby natural
map sr set reverse!
map za set info time:size
map zc set info perm:user:group

map . set hidden!
map zP set previewer '~/.config/lf/previewer' 
map zp set previewer '~/.config/lf/previewer_noimages' 

# Actions
map ac chmod
map al SymlinkCreate
map aL SymlinkRename
map aC SymlinkConvertToRelative
map af FollowLink
map as DragAndDropSend
map ar DragAndDropRecieve
map am mount
map au unmount

# Archivers
map aen ExtractToNewDir
map aeh ExtractHere
map aat ArchiveTar
map aaz	ArchiveZip

# Open
map e $$EDITOR "$f"
#map e $[ ! -d "$f" ] && $EDITOR "$f"
map se $sudoedit "$f"
map Xx $$f
map XX !$f

map <esc> :unselect; clear; set noglobsearch;
map <c-n> push :mkdir<space>
map <a-n> push $mkdir<space>
map <f-10> push $mkdir<space>
map <c-t> push :touch<space>
map <a-t> push $touch<space>
map <f-5> :set number!; set relativenumber!;
map <c-e> down
map <c-y> up
map <c-l> GoToPath
map <delete> trash
map <s-delete> delete
map <enter> shell
map <c-q> quit
map TT trash
map Tr trash-restore
map Te trash-empty
map DD delete
map Dd MoveTo
map Yy CopyTo
map V push :glob-select<space>
map gS push :globSearchSelect<space>*
map YY CopyPath
map Yc CopyFileContent
map Yn CopyName
map Yd CopyDirName

# Rename
map A :rename; cmd-end # at the very end
map r push A<c-u> # new name
map I :rename; cmd-home # at the very beginning
map i :rename # before extension
#map a :rename; cmd-right # after extension
map B Bulkrename


# Git
map gb :git_branch
map gpl ${{clear; git pull || true; echo "press ENTER"; read ENTER}}
map gst ${{clear; git status; echo "press ENTER"; read ENTER}}
map glg ${{clear; git log --graph --parents --abbrev-commit --decorate --format=format:'%C(bold green)%h %p%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold yellow)(%ar)%C(reset)%C(auto)%d%C(reset)%n''%C(white)%s%C(reset) %C(dim white)- %an <%ae>%C(reset)' --all}}
map gcl push :git_clone<space>

map w

# Movement
source ~/.config/lf/shortcutrc
map C/ cd /
map J $lf -remote "send $id cd $(sed '/EDITOR/d; s/^[^"]*"\([^"]*\)".*/\1/' $HOME/.config/lf/shortcutrc | fzf --header='Jump to bookmark:')"
map <c-f> fzf_jump
map <c-g> fzf_ripgrep


# ffmpeg commands
source ~/.config/lf/ffmpeg
## more stuff: https://github.com/gokcehan/lf/wiki/Integrations
